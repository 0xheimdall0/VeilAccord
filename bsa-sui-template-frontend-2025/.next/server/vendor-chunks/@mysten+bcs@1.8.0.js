"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mysten+bcs@1.8.0";
exports.ids = ["vendor-chunks/@mysten+bcs@1.8.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/bcs-type.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/bcs-type.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BcsEnum: () => (/* binding */ BcsEnum),\n/* harmony export */   BcsStruct: () => (/* binding */ BcsStruct),\n/* harmony export */   BcsTuple: () => (/* binding */ BcsTuple),\n/* harmony export */   BcsType: () => (/* binding */ BcsType),\n/* harmony export */   SerializedBcs: () => (/* binding */ SerializedBcs),\n/* harmony export */   bigUIntBcsType: () => (/* binding */ bigUIntBcsType),\n/* harmony export */   dynamicSizeBcsType: () => (/* binding */ dynamicSizeBcsType),\n/* harmony export */   fixedSizeBcsType: () => (/* binding */ fixedSizeBcsType),\n/* harmony export */   isSerializedBcs: () => (/* binding */ isSerializedBcs),\n/* harmony export */   lazyBcsType: () => (/* binding */ lazyBcsType),\n/* harmony export */   stringLikeBcsType: () => (/* binding */ stringLikeBcsType),\n/* harmony export */   uIntBcsType: () => (/* binding */ uIntBcsType)\n/* harmony export */ });\n/* harmony import */ var _mysten_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/utils */ \"(ssr)/./node_modules/.pnpm/@mysten+utils@0.2.0/node_modules/@mysten/utils/dist/esm/hex.js\");\n/* harmony import */ var _mysten_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mysten/utils */ \"(ssr)/./node_modules/.pnpm/@mysten+utils@0.2.0/node_modules/@mysten/utils/dist/esm/b58.js\");\n/* harmony import */ var _mysten_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mysten/utils */ \"(ssr)/./node_modules/.pnpm/@mysten+utils@0.2.0/node_modules/@mysten/utils/dist/esm/b64.js\");\n/* harmony import */ var _reader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reader.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/reader.js\");\n/* harmony import */ var _uleb_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uleb.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/uleb.js\");\n/* harmony import */ var _writer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./writer.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/writer.js\");\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _write, _serialize, _schema, _bytes;\n\n\n\n\nconst _BcsType = class _BcsType {\n  constructor(options) {\n    __privateAdd(this, _write);\n    __privateAdd(this, _serialize);\n    this.name = options.name;\n    this.read = options.read;\n    this.serializedSize = options.serializedSize ?? (() => null);\n    __privateSet(this, _write, options.write);\n    __privateSet(this, _serialize, options.serialize ?? ((value, options2) => {\n      const writer = new _writer_js__WEBPACK_IMPORTED_MODULE_0__.BcsWriter({\n        initialSize: this.serializedSize(value) ?? void 0,\n        ...options2\n      });\n      __privateGet(this, _write).call(this, value, writer);\n      return writer.toBytes();\n    }));\n    this.validate = options.validate ?? (() => {\n    });\n  }\n  write(value, writer) {\n    this.validate(value);\n    __privateGet(this, _write).call(this, value, writer);\n  }\n  serialize(value, options) {\n    this.validate(value);\n    return new SerializedBcs(this, __privateGet(this, _serialize).call(this, value, options));\n  }\n  parse(bytes) {\n    const reader = new _reader_js__WEBPACK_IMPORTED_MODULE_1__.BcsReader(bytes);\n    return this.read(reader);\n  }\n  fromHex(hex) {\n    return this.parse((0,_mysten_utils__WEBPACK_IMPORTED_MODULE_2__.fromHex)(hex));\n  }\n  fromBase58(b64) {\n    return this.parse((0,_mysten_utils__WEBPACK_IMPORTED_MODULE_3__.fromBase58)(b64));\n  }\n  fromBase64(b64) {\n    return this.parse((0,_mysten_utils__WEBPACK_IMPORTED_MODULE_4__.fromBase64)(b64));\n  }\n  transform({\n    name: name2,\n    input,\n    output,\n    validate\n  }) {\n    return new _BcsType({\n      name: name2 ?? this.name,\n      read: (reader) => output ? output(this.read(reader)) : this.read(reader),\n      write: (value, writer) => __privateGet(this, _write).call(this, input ? input(value) : value, writer),\n      serializedSize: (value) => this.serializedSize(input ? input(value) : value),\n      serialize: (value, options) => __privateGet(this, _serialize).call(this, input ? input(value) : value, options),\n      validate: (value) => {\n        validate?.(value);\n        this.validate(input ? input(value) : value);\n      }\n    });\n  }\n};\n_write = new WeakMap();\n_serialize = new WeakMap();\nlet BcsType = _BcsType;\nconst SERIALIZED_BCS_BRAND = Symbol.for(\"@mysten/serialized-bcs\");\nfunction isSerializedBcs(obj) {\n  return !!obj && typeof obj === \"object\" && obj[SERIALIZED_BCS_BRAND] === true;\n}\nclass SerializedBcs {\n  constructor(schema, bytes) {\n    __privateAdd(this, _schema);\n    __privateAdd(this, _bytes);\n    __privateSet(this, _schema, schema);\n    __privateSet(this, _bytes, bytes);\n  }\n  // Used to brand SerializedBcs so that they can be identified, even between multiple copies\n  // of the @mysten/bcs package are installed\n  get [SERIALIZED_BCS_BRAND]() {\n    return true;\n  }\n  toBytes() {\n    return __privateGet(this, _bytes);\n  }\n  toHex() {\n    return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_2__.toHex)(__privateGet(this, _bytes));\n  }\n  toBase64() {\n    return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_4__.toBase64)(__privateGet(this, _bytes));\n  }\n  toBase58() {\n    return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_3__.toBase58)(__privateGet(this, _bytes));\n  }\n  parse() {\n    return __privateGet(this, _schema).parse(__privateGet(this, _bytes));\n  }\n}\n_schema = new WeakMap();\n_bytes = new WeakMap();\nfunction fixedSizeBcsType({\n  size,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    serializedSize: () => size\n  });\n}\nfunction uIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](value),\n    validate: (value) => {\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction bigUIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](BigInt(value)),\n    validate: (val) => {\n      const value = BigInt(val);\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction dynamicSizeBcsType({\n  serialize,\n  ...options\n}) {\n  const type = new BcsType({\n    ...options,\n    serialize,\n    write: (value, writer) => {\n      for (const byte of type.serialize(value).toBytes()) {\n        writer.write8(byte);\n      }\n    }\n  });\n  return type;\n}\nfunction stringLikeBcsType({\n  toBytes,\n  fromBytes,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    read: (reader) => {\n      const length = reader.readULEB();\n      const bytes = reader.readBytes(length);\n      return fromBytes(bytes);\n    },\n    write: (hex, writer) => {\n      const bytes = toBytes(hex);\n      writer.writeULEB(bytes.length);\n      for (let i = 0; i < bytes.length; i++) {\n        writer.write8(bytes[i]);\n      }\n    },\n    serialize: (value) => {\n      const bytes = toBytes(value);\n      const size = (0,_uleb_js__WEBPACK_IMPORTED_MODULE_5__.ulebEncode)(bytes.length);\n      const result = new Uint8Array(size.length + bytes.length);\n      result.set(size, 0);\n      result.set(bytes, size.length);\n      return result;\n    },\n    validate: (value) => {\n      if (typeof value !== \"string\") {\n        throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction lazyBcsType(cb) {\n  let lazyType = null;\n  function getType() {\n    if (!lazyType) {\n      lazyType = cb();\n    }\n    return lazyType;\n  }\n  return new BcsType({\n    name: \"lazy\",\n    read: (data) => getType().read(data),\n    serializedSize: (value) => getType().serializedSize(value),\n    write: (value, writer) => getType().write(value, writer),\n    serialize: (value, options) => getType().serialize(value, options).toBytes()\n  });\n}\nclass BcsStruct extends BcsType {\n  constructor({ name: name2, fields, ...options }) {\n    const canonicalOrder = Object.entries(fields);\n    super({\n      name: name2,\n      serializedSize: (values) => {\n        let total = 0;\n        for (const [field, type] of canonicalOrder) {\n          const size = type.serializedSize(values[field]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = {};\n        for (const [field, type] of canonicalOrder) {\n          result[field] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const [field, type] of canonicalOrder) {\n          type.write(value[field], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n      }\n    });\n  }\n}\nclass BcsEnum extends BcsType {\n  constructor({ fields, ...options }) {\n    const canonicalOrder = Object.entries(fields);\n    super({\n      read: (reader) => {\n        const index = reader.readULEB();\n        const enumEntry = canonicalOrder[index];\n        if (!enumEntry) {\n          throw new TypeError(`Unknown value ${index} for enum ${name}`);\n        }\n        const [kind, type] = enumEntry;\n        return {\n          [kind]: type?.read(reader) ?? true,\n          $kind: kind\n        };\n      },\n      write: (value, writer) => {\n        const [name2, val] = Object.entries(value).filter(\n          ([name3]) => Object.hasOwn(fields, name3)\n        )[0];\n        for (let i = 0; i < canonicalOrder.length; i++) {\n          const [optionName, optionType] = canonicalOrder[i];\n          if (optionName === name2) {\n            writer.writeULEB(i);\n            optionType?.write(val, writer);\n            return;\n          }\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n        const keys = Object.keys(value).filter(\n          (k) => value[k] !== void 0 && Object.hasOwn(fields, k)\n        );\n        if (keys.length !== 1) {\n          throw new TypeError(\n            `Expected object with one key, but found ${keys.length} for type ${name}}`\n          );\n        }\n        const [variant] = keys;\n        if (!Object.hasOwn(fields, variant)) {\n          throw new TypeError(`Invalid enum variant ${variant}`);\n        }\n      }\n    });\n  }\n}\nclass BcsTuple extends BcsType {\n  constructor({ fields, name: name2, ...options }) {\n    super({\n      name: name2 ?? `(${fields.map((t) => t.name).join(\", \")})`,\n      serializedSize: (values) => {\n        let total = 0;\n        for (let i = 0; i < fields.length; i++) {\n          const size = fields[i].serializedSize(values[i]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = [];\n        for (const field of fields) {\n          result.push(field.read(reader));\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (let i = 0; i < fields.length; i++) {\n          fields[i].write(value[i], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!Array.isArray(value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== fields.length) {\n          throw new TypeError(`Expected array of length ${fields.length}, found ${value.length}`);\n        }\n      }\n    });\n  }\n}\n\n//# sourceMappingURL=bcs-type.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG15c3RlbitiY3NAMS44LjAvbm9kZV9tb2R1bGVzL0BteXN0ZW4vYmNzL2Rpc3QvZXNtL2Jjcy10eXBlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkY7QUFDbkQ7QUFDRDtBQUNDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpREFBUztBQUNsQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaURBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFPO0FBQzdCO0FBQ0E7QUFDQSxzQkFBc0IseURBQVU7QUFDaEM7QUFDQTtBQUNBLHNCQUFzQix5REFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9EQUFLO0FBQ2hCO0FBQ0E7QUFDQSxXQUFXLHVEQUFRO0FBQ25CO0FBQ0E7QUFDQSxXQUFXLHVEQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGNBQWMsU0FBUyxNQUFNLDhCQUE4QixpQkFBaUI7QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGNBQWMsU0FBUyxNQUFNLDhCQUE4QixpQkFBaUI7QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLG9EQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx1Q0FBdUMsY0FBYyxTQUFTLE1BQU07QUFDcEU7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0JBQWdCLGlDQUFpQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsYUFBYTtBQUNyRTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLE9BQU8sV0FBVyxLQUFLO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwyQkFBMkI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsYUFBYTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsYUFBYSxXQUFXLE1BQU07QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsUUFBUTtBQUM5RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpQ0FBaUM7QUFDakQ7QUFDQSx5QkFBeUIscUNBQXFDO0FBQzlEO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxhQUFhO0FBQ3BFO0FBQ0E7QUFDQSwwREFBMEQsY0FBYyxVQUFVLGFBQWE7QUFDL0Y7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBY0U7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxNYXR0ZW9cXERlc2t0b3BcXFZlaWxBY2NvcmRcXGJzYS1zdWktdGVtcGxhdGUtZnJvbnRlbmQtMjAyNVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG15c3RlbitiY3NAMS44LjBcXG5vZGVfbW9kdWxlc1xcQG15c3RlblxcYmNzXFxkaXN0XFxlc21cXGJjcy10eXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3R5cGVFcnJvciA9IChtc2cpID0+IHtcbiAgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG59O1xudmFyIF9fYWNjZXNzQ2hlY2sgPSAob2JqLCBtZW1iZXIsIG1zZykgPT4gbWVtYmVyLmhhcyhvYmopIHx8IF9fdHlwZUVycm9yKFwiQ2Fubm90IFwiICsgbXNnKTtcbnZhciBfX3ByaXZhdGVHZXQgPSAob2JqLCBtZW1iZXIsIGdldHRlcikgPT4gKF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwicmVhZCBmcm9tIHByaXZhdGUgZmllbGRcIiksIGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiBtZW1iZXIuZ2V0KG9iaikpO1xudmFyIF9fcHJpdmF0ZUFkZCA9IChvYmosIG1lbWJlciwgdmFsdWUpID0+IG1lbWJlci5oYXMob2JqKSA/IF9fdHlwZUVycm9yKFwiQ2Fubm90IGFkZCB0aGUgc2FtZSBwcml2YXRlIG1lbWJlciBtb3JlIHRoYW4gb25jZVwiKSA6IG1lbWJlciBpbnN0YW5jZW9mIFdlYWtTZXQgPyBtZW1iZXIuYWRkKG9iaikgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xudmFyIF9fcHJpdmF0ZVNldCA9IChvYmosIG1lbWJlciwgdmFsdWUsIHNldHRlcikgPT4gKF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKSwgc2V0dGVyID8gc2V0dGVyLmNhbGwob2JqLCB2YWx1ZSkgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpLCB2YWx1ZSk7XG52YXIgX3dyaXRlLCBfc2VyaWFsaXplLCBfc2NoZW1hLCBfYnl0ZXM7XG5pbXBvcnQgeyBmcm9tQmFzZTU4LCBmcm9tQmFzZTY0LCB0b0Jhc2U1OCwgdG9CYXNlNjQsIGZyb21IZXgsIHRvSGV4IH0gZnJvbSBcIkBteXN0ZW4vdXRpbHNcIjtcbmltcG9ydCB7IEJjc1JlYWRlciB9IGZyb20gXCIuL3JlYWRlci5qc1wiO1xuaW1wb3J0IHsgdWxlYkVuY29kZSB9IGZyb20gXCIuL3VsZWIuanNcIjtcbmltcG9ydCB7IEJjc1dyaXRlciB9IGZyb20gXCIuL3dyaXRlci5qc1wiO1xuY29uc3QgX0Jjc1R5cGUgPSBjbGFzcyBfQmNzVHlwZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX3dyaXRlKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX3NlcmlhbGl6ZSk7XG4gICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgIHRoaXMucmVhZCA9IG9wdGlvbnMucmVhZDtcbiAgICB0aGlzLnNlcmlhbGl6ZWRTaXplID0gb3B0aW9ucy5zZXJpYWxpemVkU2l6ZSA/PyAoKCkgPT4gbnVsbCk7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF93cml0ZSwgb3B0aW9ucy53cml0ZSk7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9zZXJpYWxpemUsIG9wdGlvbnMuc2VyaWFsaXplID8/ICgodmFsdWUsIG9wdGlvbnMyKSA9PiB7XG4gICAgICBjb25zdCB3cml0ZXIgPSBuZXcgQmNzV3JpdGVyKHtcbiAgICAgICAgaW5pdGlhbFNpemU6IHRoaXMuc2VyaWFsaXplZFNpemUodmFsdWUpID8/IHZvaWQgMCxcbiAgICAgICAgLi4ub3B0aW9uczJcbiAgICAgIH0pO1xuICAgICAgX19wcml2YXRlR2V0KHRoaXMsIF93cml0ZSkuY2FsbCh0aGlzLCB2YWx1ZSwgd3JpdGVyKTtcbiAgICAgIHJldHVybiB3cml0ZXIudG9CeXRlcygpO1xuICAgIH0pKTtcbiAgICB0aGlzLnZhbGlkYXRlID0gb3B0aW9ucy52YWxpZGF0ZSA/PyAoKCkgPT4ge1xuICAgIH0pO1xuICB9XG4gIHdyaXRlKHZhbHVlLCB3cml0ZXIpIHtcbiAgICB0aGlzLnZhbGlkYXRlKHZhbHVlKTtcbiAgICBfX3ByaXZhdGVHZXQodGhpcywgX3dyaXRlKS5jYWxsKHRoaXMsIHZhbHVlLCB3cml0ZXIpO1xuICB9XG4gIHNlcmlhbGl6ZSh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHRoaXMudmFsaWRhdGUodmFsdWUpO1xuICAgIHJldHVybiBuZXcgU2VyaWFsaXplZEJjcyh0aGlzLCBfX3ByaXZhdGVHZXQodGhpcywgX3NlcmlhbGl6ZSkuY2FsbCh0aGlzLCB2YWx1ZSwgb3B0aW9ucykpO1xuICB9XG4gIHBhcnNlKGJ5dGVzKSB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEJjc1JlYWRlcihieXRlcyk7XG4gICAgcmV0dXJuIHRoaXMucmVhZChyZWFkZXIpO1xuICB9XG4gIGZyb21IZXgoaGV4KSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UoZnJvbUhleChoZXgpKTtcbiAgfVxuICBmcm9tQmFzZTU4KGI2NCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlKGZyb21CYXNlNTgoYjY0KSk7XG4gIH1cbiAgZnJvbUJhc2U2NChiNjQpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZShmcm9tQmFzZTY0KGI2NCkpO1xuICB9XG4gIHRyYW5zZm9ybSh7XG4gICAgbmFtZTogbmFtZTIsXG4gICAgaW5wdXQsXG4gICAgb3V0cHV0LFxuICAgIHZhbGlkYXRlXG4gIH0pIHtcbiAgICByZXR1cm4gbmV3IF9CY3NUeXBlKHtcbiAgICAgIG5hbWU6IG5hbWUyID8/IHRoaXMubmFtZSxcbiAgICAgIHJlYWQ6IChyZWFkZXIpID0+IG91dHB1dCA/IG91dHB1dCh0aGlzLnJlYWQocmVhZGVyKSkgOiB0aGlzLnJlYWQocmVhZGVyKSxcbiAgICAgIHdyaXRlOiAodmFsdWUsIHdyaXRlcikgPT4gX19wcml2YXRlR2V0KHRoaXMsIF93cml0ZSkuY2FsbCh0aGlzLCBpbnB1dCA/IGlucHV0KHZhbHVlKSA6IHZhbHVlLCB3cml0ZXIpLFxuICAgICAgc2VyaWFsaXplZFNpemU6ICh2YWx1ZSkgPT4gdGhpcy5zZXJpYWxpemVkU2l6ZShpbnB1dCA/IGlucHV0KHZhbHVlKSA6IHZhbHVlKSxcbiAgICAgIHNlcmlhbGl6ZTogKHZhbHVlLCBvcHRpb25zKSA9PiBfX3ByaXZhdGVHZXQodGhpcywgX3NlcmlhbGl6ZSkuY2FsbCh0aGlzLCBpbnB1dCA/IGlucHV0KHZhbHVlKSA6IHZhbHVlLCBvcHRpb25zKSxcbiAgICAgIHZhbGlkYXRlOiAodmFsdWUpID0+IHtcbiAgICAgICAgdmFsaWRhdGU/Lih2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsaWRhdGUoaW5wdXQgPyBpbnB1dCh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5fd3JpdGUgPSBuZXcgV2Vha01hcCgpO1xuX3NlcmlhbGl6ZSA9IG5ldyBXZWFrTWFwKCk7XG5sZXQgQmNzVHlwZSA9IF9CY3NUeXBlO1xuY29uc3QgU0VSSUFMSVpFRF9CQ1NfQlJBTkQgPSBTeW1ib2wuZm9yKFwiQG15c3Rlbi9zZXJpYWxpemVkLWJjc1wiKTtcbmZ1bmN0aW9uIGlzU2VyaWFsaXplZEJjcyhvYmopIHtcbiAgcmV0dXJuICEhb2JqICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgb2JqW1NFUklBTElaRURfQkNTX0JSQU5EXSA9PT0gdHJ1ZTtcbn1cbmNsYXNzIFNlcmlhbGl6ZWRCY3Mge1xuICBjb25zdHJ1Y3RvcihzY2hlbWEsIGJ5dGVzKSB7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9zY2hlbWEpO1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfYnl0ZXMpO1xuICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfc2NoZW1hLCBzY2hlbWEpO1xuICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfYnl0ZXMsIGJ5dGVzKTtcbiAgfVxuICAvLyBVc2VkIHRvIGJyYW5kIFNlcmlhbGl6ZWRCY3Mgc28gdGhhdCB0aGV5IGNhbiBiZSBpZGVudGlmaWVkLCBldmVuIGJldHdlZW4gbXVsdGlwbGUgY29waWVzXG4gIC8vIG9mIHRoZSBAbXlzdGVuL2JjcyBwYWNrYWdlIGFyZSBpbnN0YWxsZWRcbiAgZ2V0IFtTRVJJQUxJWkVEX0JDU19CUkFORF0oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdG9CeXRlcygpIHtcbiAgICByZXR1cm4gX19wcml2YXRlR2V0KHRoaXMsIF9ieXRlcyk7XG4gIH1cbiAgdG9IZXgoKSB7XG4gICAgcmV0dXJuIHRvSGV4KF9fcHJpdmF0ZUdldCh0aGlzLCBfYnl0ZXMpKTtcbiAgfVxuICB0b0Jhc2U2NCgpIHtcbiAgICByZXR1cm4gdG9CYXNlNjQoX19wcml2YXRlR2V0KHRoaXMsIF9ieXRlcykpO1xuICB9XG4gIHRvQmFzZTU4KCkge1xuICAgIHJldHVybiB0b0Jhc2U1OChfX3ByaXZhdGVHZXQodGhpcywgX2J5dGVzKSk7XG4gIH1cbiAgcGFyc2UoKSB7XG4gICAgcmV0dXJuIF9fcHJpdmF0ZUdldCh0aGlzLCBfc2NoZW1hKS5wYXJzZShfX3ByaXZhdGVHZXQodGhpcywgX2J5dGVzKSk7XG4gIH1cbn1cbl9zY2hlbWEgPSBuZXcgV2Vha01hcCgpO1xuX2J5dGVzID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIGZpeGVkU2l6ZUJjc1R5cGUoe1xuICBzaXplLFxuICAuLi5vcHRpb25zXG59KSB7XG4gIHJldHVybiBuZXcgQmNzVHlwZSh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBzZXJpYWxpemVkU2l6ZTogKCkgPT4gc2l6ZVxuICB9KTtcbn1cbmZ1bmN0aW9uIHVJbnRCY3NUeXBlKHtcbiAgcmVhZE1ldGhvZCxcbiAgd3JpdGVNZXRob2QsXG4gIC4uLm9wdGlvbnNcbn0pIHtcbiAgcmV0dXJuIGZpeGVkU2l6ZUJjc1R5cGUoe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgcmVhZDogKHJlYWRlcikgPT4gcmVhZGVyW3JlYWRNZXRob2RdKCksXG4gICAgd3JpdGU6ICh2YWx1ZSwgd3JpdGVyKSA9PiB3cml0ZXJbd3JpdGVNZXRob2RdKHZhbHVlKSxcbiAgICB2YWxpZGF0ZTogKHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPCAwIHx8IHZhbHVlID4gb3B0aW9ucy5tYXhWYWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkICR7b3B0aW9ucy5uYW1lfSB2YWx1ZTogJHt2YWx1ZX0uIEV4cGVjdGVkIHZhbHVlIGluIHJhbmdlIDAtJHtvcHRpb25zLm1heFZhbHVlfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudmFsaWRhdGU/Lih2YWx1ZSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGJpZ1VJbnRCY3NUeXBlKHtcbiAgcmVhZE1ldGhvZCxcbiAgd3JpdGVNZXRob2QsXG4gIC4uLm9wdGlvbnNcbn0pIHtcbiAgcmV0dXJuIGZpeGVkU2l6ZUJjc1R5cGUoe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgcmVhZDogKHJlYWRlcikgPT4gcmVhZGVyW3JlYWRNZXRob2RdKCksXG4gICAgd3JpdGU6ICh2YWx1ZSwgd3JpdGVyKSA9PiB3cml0ZXJbd3JpdGVNZXRob2RdKEJpZ0ludCh2YWx1ZSkpLFxuICAgIHZhbGlkYXRlOiAodmFsKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IEJpZ0ludCh2YWwpO1xuICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IG9wdGlvbnMubWF4VmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBgSW52YWxpZCAke29wdGlvbnMubmFtZX0gdmFsdWU6ICR7dmFsdWV9LiBFeHBlY3RlZCB2YWx1ZSBpbiByYW5nZSAwLSR7b3B0aW9ucy5tYXhWYWx1ZX1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnZhbGlkYXRlPy4odmFsdWUpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBkeW5hbWljU2l6ZUJjc1R5cGUoe1xuICBzZXJpYWxpemUsXG4gIC4uLm9wdGlvbnNcbn0pIHtcbiAgY29uc3QgdHlwZSA9IG5ldyBCY3NUeXBlKHtcbiAgICAuLi5vcHRpb25zLFxuICAgIHNlcmlhbGl6ZSxcbiAgICB3cml0ZTogKHZhbHVlLCB3cml0ZXIpID0+IHtcbiAgICAgIGZvciAoY29uc3QgYnl0ZSBvZiB0eXBlLnNlcmlhbGl6ZSh2YWx1ZSkudG9CeXRlcygpKSB7XG4gICAgICAgIHdyaXRlci53cml0ZTgoYnl0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5mdW5jdGlvbiBzdHJpbmdMaWtlQmNzVHlwZSh7XG4gIHRvQnl0ZXMsXG4gIGZyb21CeXRlcyxcbiAgLi4ub3B0aW9uc1xufSkge1xuICByZXR1cm4gbmV3IEJjc1R5cGUoe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgcmVhZDogKHJlYWRlcikgPT4ge1xuICAgICAgY29uc3QgbGVuZ3RoID0gcmVhZGVyLnJlYWRVTEVCKCk7XG4gICAgICBjb25zdCBieXRlcyA9IHJlYWRlci5yZWFkQnl0ZXMobGVuZ3RoKTtcbiAgICAgIHJldHVybiBmcm9tQnl0ZXMoYnl0ZXMpO1xuICAgIH0sXG4gICAgd3JpdGU6IChoZXgsIHdyaXRlcikgPT4ge1xuICAgICAgY29uc3QgYnl0ZXMgPSB0b0J5dGVzKGhleCk7XG4gICAgICB3cml0ZXIud3JpdGVVTEVCKGJ5dGVzLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdyaXRlci53cml0ZTgoYnl0ZXNbaV0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2VyaWFsaXplOiAodmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gdG9CeXRlcyh2YWx1ZSk7XG4gICAgICBjb25zdCBzaXplID0gdWxlYkVuY29kZShieXRlcy5sZW5ndGgpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZS5sZW5ndGggKyBieXRlcy5sZW5ndGgpO1xuICAgICAgcmVzdWx0LnNldChzaXplLCAwKTtcbiAgICAgIHJlc3VsdC5zZXQoYnl0ZXMsIHNpemUubGVuZ3RoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogKHZhbHVlKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgJHtvcHRpb25zLm5hbWV9IHZhbHVlOiAke3ZhbHVlfS4gRXhwZWN0ZWQgc3RyaW5nYCk7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnZhbGlkYXRlPy4odmFsdWUpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBsYXp5QmNzVHlwZShjYikge1xuICBsZXQgbGF6eVR5cGUgPSBudWxsO1xuICBmdW5jdGlvbiBnZXRUeXBlKCkge1xuICAgIGlmICghbGF6eVR5cGUpIHtcbiAgICAgIGxhenlUeXBlID0gY2IoKTtcbiAgICB9XG4gICAgcmV0dXJuIGxhenlUeXBlO1xuICB9XG4gIHJldHVybiBuZXcgQmNzVHlwZSh7XG4gICAgbmFtZTogXCJsYXp5XCIsXG4gICAgcmVhZDogKGRhdGEpID0+IGdldFR5cGUoKS5yZWFkKGRhdGEpLFxuICAgIHNlcmlhbGl6ZWRTaXplOiAodmFsdWUpID0+IGdldFR5cGUoKS5zZXJpYWxpemVkU2l6ZSh2YWx1ZSksXG4gICAgd3JpdGU6ICh2YWx1ZSwgd3JpdGVyKSA9PiBnZXRUeXBlKCkud3JpdGUodmFsdWUsIHdyaXRlciksXG4gICAgc2VyaWFsaXplOiAodmFsdWUsIG9wdGlvbnMpID0+IGdldFR5cGUoKS5zZXJpYWxpemUodmFsdWUsIG9wdGlvbnMpLnRvQnl0ZXMoKVxuICB9KTtcbn1cbmNsYXNzIEJjc1N0cnVjdCBleHRlbmRzIEJjc1R5cGUge1xuICBjb25zdHJ1Y3Rvcih7IG5hbWU6IG5hbWUyLCBmaWVsZHMsIC4uLm9wdGlvbnMgfSkge1xuICAgIGNvbnN0IGNhbm9uaWNhbE9yZGVyID0gT2JqZWN0LmVudHJpZXMoZmllbGRzKTtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBuYW1lMixcbiAgICAgIHNlcmlhbGl6ZWRTaXplOiAodmFsdWVzKSA9PiB7XG4gICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgW2ZpZWxkLCB0eXBlXSBvZiBjYW5vbmljYWxPcmRlcikge1xuICAgICAgICAgIGNvbnN0IHNpemUgPSB0eXBlLnNlcmlhbGl6ZWRTaXplKHZhbHVlc1tmaWVsZF0pO1xuICAgICAgICAgIGlmIChzaXplID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b3RhbCArPSBzaXplO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICAgIH0sXG4gICAgICByZWFkOiAocmVhZGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IFtmaWVsZCwgdHlwZV0gb2YgY2Fub25pY2FsT3JkZXIpIHtcbiAgICAgICAgICByZXN1bHRbZmllbGRdID0gdHlwZS5yZWFkKHJlYWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sXG4gICAgICB3cml0ZTogKHZhbHVlLCB3cml0ZXIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbZmllbGQsIHR5cGVdIG9mIGNhbm9uaWNhbE9yZGVyKSB7XG4gICAgICAgICAgdHlwZS53cml0ZSh2YWx1ZVtmaWVsZF0sIHdyaXRlcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgdmFsaWRhdGU6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBvcHRpb25zPy52YWxpZGF0ZT8uKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgb2JqZWN0LCBmb3VuZCAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBCY3NFbnVtIGV4dGVuZHMgQmNzVHlwZSB7XG4gIGNvbnN0cnVjdG9yKHsgZmllbGRzLCAuLi5vcHRpb25zIH0pIHtcbiAgICBjb25zdCBjYW5vbmljYWxPcmRlciA9IE9iamVjdC5lbnRyaWVzKGZpZWxkcyk7XG4gICAgc3VwZXIoe1xuICAgICAgcmVhZDogKHJlYWRlcikgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IHJlYWRlci5yZWFkVUxFQigpO1xuICAgICAgICBjb25zdCBlbnVtRW50cnkgPSBjYW5vbmljYWxPcmRlcltpbmRleF07XG4gICAgICAgIGlmICghZW51bUVudHJ5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5rbm93biB2YWx1ZSAke2luZGV4fSBmb3IgZW51bSAke25hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2tpbmQsIHR5cGVdID0gZW51bUVudHJ5O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtraW5kXTogdHlwZT8ucmVhZChyZWFkZXIpID8/IHRydWUsXG4gICAgICAgICAgJGtpbmQ6IGtpbmRcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICB3cml0ZTogKHZhbHVlLCB3cml0ZXIpID0+IHtcbiAgICAgICAgY29uc3QgW25hbWUyLCB2YWxdID0gT2JqZWN0LmVudHJpZXModmFsdWUpLmZpbHRlcihcbiAgICAgICAgICAoW25hbWUzXSkgPT4gT2JqZWN0Lmhhc093bihmaWVsZHMsIG5hbWUzKVxuICAgICAgICApWzBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbm9uaWNhbE9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgW29wdGlvbk5hbWUsIG9wdGlvblR5cGVdID0gY2Fub25pY2FsT3JkZXJbaV07XG4gICAgICAgICAgaWYgKG9wdGlvbk5hbWUgPT09IG5hbWUyKSB7XG4gICAgICAgICAgICB3cml0ZXIud3JpdGVVTEVCKGkpO1xuICAgICAgICAgICAgb3B0aW9uVHlwZT8ud3JpdGUodmFsLCB3cml0ZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB2YWxpZGF0ZTogKHZhbHVlKSA9PiB7XG4gICAgICAgIG9wdGlvbnM/LnZhbGlkYXRlPy4odmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBvYmplY3QsIGZvdW5kICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSkuZmlsdGVyKFxuICAgICAgICAgIChrKSA9PiB2YWx1ZVtrXSAhPT0gdm9pZCAwICYmIE9iamVjdC5oYXNPd24oZmllbGRzLCBrKVxuICAgICAgICApO1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgYEV4cGVjdGVkIG9iamVjdCB3aXRoIG9uZSBrZXksIGJ1dCBmb3VuZCAke2tleXMubGVuZ3RofSBmb3IgdHlwZSAke25hbWV9fWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFt2YXJpYW50XSA9IGtleXM7XG4gICAgICAgIGlmICghT2JqZWN0Lmhhc093bihmaWVsZHMsIHZhcmlhbnQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBlbnVtIHZhcmlhbnQgJHt2YXJpYW50fWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEJjc1R1cGxlIGV4dGVuZHMgQmNzVHlwZSB7XG4gIGNvbnN0cnVjdG9yKHsgZmllbGRzLCBuYW1lOiBuYW1lMiwgLi4ub3B0aW9ucyB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogbmFtZTIgPz8gYCgke2ZpZWxkcy5tYXAoKHQpID0+IHQubmFtZSkuam9pbihcIiwgXCIpfSlgLFxuICAgICAgc2VyaWFsaXplZFNpemU6ICh2YWx1ZXMpID0+IHtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzaXplID0gZmllbGRzW2ldLnNlcmlhbGl6ZWRTaXplKHZhbHVlc1tpXSk7XG4gICAgICAgICAgaWYgKHNpemUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRvdGFsICs9IHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgfSxcbiAgICAgIHJlYWQ6IChyZWFkZXIpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgZmllbGRzKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZmllbGQucmVhZChyZWFkZXIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSxcbiAgICAgIHdyaXRlOiAodmFsdWUsIHdyaXRlcikgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGZpZWxkc1tpXS53cml0ZSh2YWx1ZVtpXSwgd3JpdGVyKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB2YWxpZGF0ZTogKHZhbHVlKSA9PiB7XG4gICAgICAgIG9wdGlvbnM/LnZhbGlkYXRlPy4odmFsdWUpO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYXJyYXksIGZvdW5kICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggIT09IGZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBhcnJheSBvZiBsZW5ndGggJHtmaWVsZHMubGVuZ3RofSwgZm91bmQgJHt2YWx1ZS5sZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgQmNzRW51bSxcbiAgQmNzU3RydWN0LFxuICBCY3NUdXBsZSxcbiAgQmNzVHlwZSxcbiAgU2VyaWFsaXplZEJjcyxcbiAgYmlnVUludEJjc1R5cGUsXG4gIGR5bmFtaWNTaXplQmNzVHlwZSxcbiAgZml4ZWRTaXplQmNzVHlwZSxcbiAgaXNTZXJpYWxpemVkQmNzLFxuICBsYXp5QmNzVHlwZSxcbiAgc3RyaW5nTGlrZUJjc1R5cGUsXG4gIHVJbnRCY3NUeXBlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmNzLXR5cGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/bcs-type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/bcs.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/bcs.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bcs: () => (/* binding */ bcs)\n/* harmony export */ });\n/* harmony import */ var _bcs_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bcs-type.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/bcs-type.js\");\n/* harmony import */ var _uleb_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uleb.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/uleb.js\");\n\n\nfunction fixedArray(size, type, options) {\n  return new _bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.BcsType({\n    read: (reader) => {\n      const result = new Array(size);\n      for (let i = 0; i < size; i++) {\n        result[i] = type.read(reader);\n      }\n      return result;\n    },\n    write: (value, writer) => {\n      for (const item of value) {\n        type.write(item, writer);\n      }\n    },\n    ...options,\n    name: options?.name ?? `${type.name}[${size}]`,\n    validate: (value) => {\n      options?.validate?.(value);\n      if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n        throw new TypeError(`Expected array, found ${typeof value}`);\n      }\n      if (value.length !== size) {\n        throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n      }\n    }\n  });\n}\nfunction option(type) {\n  return bcs.enum(`Option<${type.name}>`, {\n    None: null,\n    Some: type\n  }).transform({\n    input: (value) => {\n      if (value == null) {\n        return { None: true };\n      }\n      return { Some: value };\n    },\n    output: (value) => {\n      if (value.$kind === \"Some\") {\n        return value.Some;\n      }\n      return null;\n    }\n  });\n}\nfunction vector(type, options) {\n  return new _bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.BcsType({\n    read: (reader) => {\n      const length = reader.readULEB();\n      const result = new Array(length);\n      for (let i = 0; i < length; i++) {\n        result[i] = type.read(reader);\n      }\n      return result;\n    },\n    write: (value, writer) => {\n      writer.writeULEB(value.length);\n      for (const item of value) {\n        type.write(item, writer);\n      }\n    },\n    ...options,\n    name: options?.name ?? `vector<${type.name}>`,\n    validate: (value) => {\n      options?.validate?.(value);\n      if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n        throw new TypeError(`Expected array, found ${typeof value}`);\n      }\n    }\n  });\n}\nfunction map(keyType, valueType) {\n  return bcs.vector(bcs.tuple([keyType, valueType])).transform({\n    name: `Map<${keyType.name}, ${valueType.name}>`,\n    input: (value) => {\n      return [...value.entries()];\n    },\n    output: (value) => {\n      const result = /* @__PURE__ */ new Map();\n      for (const [key, val] of value) {\n        result.set(key, val);\n      }\n      return result;\n    }\n  });\n}\nconst bcs = {\n  /**\n   * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.\n   * @example\n   * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]\n   */\n  u8(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.uIntBcsType)({\n      readMethod: \"read8\",\n      writeMethod: \"write8\",\n      size: 1,\n      maxValue: 2 ** 8 - 1,\n      ...options,\n      name: options?.name ?? \"u8\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.\n   * @example\n   * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]\n   */\n  u16(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.uIntBcsType)({\n      readMethod: \"read16\",\n      writeMethod: \"write16\",\n      size: 2,\n      maxValue: 2 ** 16 - 1,\n      ...options,\n      name: options?.name ?? \"u16\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.\n   * @example\n   * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]\n   */\n  u32(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.uIntBcsType)({\n      readMethod: \"read32\",\n      writeMethod: \"write32\",\n      size: 4,\n      maxValue: 2 ** 32 - 1,\n      ...options,\n      name: options?.name ?? \"u32\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.\n   * @example\n   * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]\n   */\n  u64(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.bigUIntBcsType)({\n      readMethod: \"read64\",\n      writeMethod: \"write64\",\n      size: 8,\n      maxValue: 2n ** 64n - 1n,\n      ...options,\n      name: options?.name ?? \"u64\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.\n   * @example\n   * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u128(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.bigUIntBcsType)({\n      readMethod: \"read128\",\n      writeMethod: \"write128\",\n      size: 16,\n      maxValue: 2n ** 128n - 1n,\n      ...options,\n      name: options?.name ?? \"u128\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.\n   * @example\n   * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u256(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.bigUIntBcsType)({\n      readMethod: \"read256\",\n      writeMethod: \"write256\",\n      size: 32,\n      maxValue: 2n ** 256n - 1n,\n      ...options,\n      name: options?.name ?? \"u256\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write boolean values.\n   * @example\n   * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]\n   */\n  bool(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.fixedSizeBcsType)({\n      size: 1,\n      read: (reader) => reader.read8() === 1,\n      write: (value, writer) => writer.write8(value ? 1 : 0),\n      ...options,\n      name: options?.name ?? \"bool\",\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"boolean\") {\n          throw new TypeError(`Expected boolean, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write unsigned LEB encoded integers\n   * @example\n   *\n   */\n  uleb128(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.dynamicSizeBcsType)({\n      read: (reader) => reader.readULEB(),\n      serialize: (value) => {\n        return Uint8Array.from((0,_uleb_js__WEBPACK_IMPORTED_MODULE_1__.ulebEncode)(value));\n      },\n      ...options,\n      name: options?.name ?? \"uleb128\"\n    });\n  },\n  /**\n   * Creates a BcsType representing a fixed length byte array\n   * @param size The number of bytes this types represents\n   * @example\n   * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]\n   */\n  bytes(size, options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.fixedSizeBcsType)({\n      size,\n      read: (reader) => reader.readBytes(size),\n      write: (value, writer) => {\n        const array = new Uint8Array(value);\n        for (let i = 0; i < size; i++) {\n          writer.write8(array[i] ?? 0);\n        }\n      },\n      ...options,\n      name: options?.name ?? `bytes[${size}]`,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a variable length byte array\n   *\n   * @example\n   * bcs.byteVector().serialize([1, 2, 3]).toBytes() // Uint8Array [3, 1, 2, 3]\n   */\n  byteVector(options) {\n    return new _bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.BcsType({\n      read: (reader) => {\n        const length = reader.readULEB();\n        return reader.readBytes(length);\n      },\n      write: (value, writer) => {\n        const array = new Uint8Array(value);\n        writer.writeULEB(array.length);\n        for (let i = 0; i < array.length; i++) {\n          writer.write8(array[i] ?? 0);\n        }\n      },\n      ...options,\n      name: options?.name ?? \"vector<u8>\",\n      serializedSize: (value) => {\n        const length = \"length\" in value ? value.length : null;\n        return length == null ? null : (0,_uleb_js__WEBPACK_IMPORTED_MODULE_1__.ulebEncode)(length).length + length;\n      },\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded\n   * @example\n   * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]\n   */\n  string(options) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.stringLikeBcsType)({\n      toBytes: (value) => new TextEncoder().encode(value),\n      fromBytes: (bytes) => new TextDecoder().decode(bytes),\n      ...options,\n      name: options?.name ?? \"string\"\n    });\n  },\n  /**\n   * Creates a BcsType that represents a fixed length array of a given type\n   * @param size The number of elements in the array\n   * @param type The BcsType of each element in the array\n   * @example\n   * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]\n   */\n  fixedArray,\n  /**\n   * Creates a BcsType representing an optional value\n   * @param type The BcsType of the optional value\n   * @example\n   * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]\n   * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]\n   */\n  option,\n  /**\n   * Creates a BcsType representing a variable length vector of a given type\n   * @param type The BcsType of each element in the vector\n   *\n   * @example\n   * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]\n   */\n  vector,\n  /**\n   * Creates a BcsType representing a tuple of a given set of types\n   * @param types The BcsTypes for each element in the tuple\n   *\n   * @example\n   * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])\n   * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]\n   */\n  tuple(fields, options) {\n    return new _bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.BcsTuple({\n      fields,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing a struct of a given set of fields\n   * @param name The name of the struct\n   * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized\n   *\n   * @example\n   * const struct = bcs.struct('MyStruct', {\n   *  a: bcs.u8(),\n   *  b: bcs.string(),\n   * })\n   * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   */\n  struct(name, fields, options) {\n    return new _bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.BcsStruct({\n      name,\n      fields,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing an enum of a given set of options\n   * @param name The name of the enum\n   * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.\n   * null can be used to represent a variant with no data.\n   *\n   * @example\n   * const enum = bcs.enum('MyEnum', {\n   *   A: bcs.u8(),\n   *   B: bcs.string(),\n   *   C: null,\n   * })\n   * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]\n   * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]\n   */\n  enum(name, fields, options) {\n    return new _bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.BcsEnum({\n      name,\n      fields,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing a map of a given key and value type\n   * @param keyType The BcsType of the key\n   * @param valueType The BcsType of the value\n   * @example\n   * const map = bcs.map(bcs.u8(), bcs.string())\n   * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]\n   */\n  map,\n  /**\n   * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.\n   * @param cb A callback that returns the BcsType\n   */\n  lazy(cb) {\n    return (0,_bcs_type_js__WEBPACK_IMPORTED_MODULE_0__.lazyBcsType)(cb);\n  }\n};\n\n//# sourceMappingURL=bcs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/bcs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/reader.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/reader.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BcsReader: () => (/* binding */ BcsReader)\n/* harmony export */ });\n/* harmony import */ var _uleb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uleb.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/uleb.js\");\n\nclass BcsReader {\n  /**\n   * @param {Uint8Array} data Data to use as a buffer.\n   */\n  constructor(data) {\n    this.bytePosition = 0;\n    this.dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Read U8 value from the buffer and shift cursor by 1.\n   * @returns\n   */\n  read8() {\n    const value = this.dataView.getUint8(this.bytePosition);\n    this.shift(1);\n    return value;\n  }\n  /**\n   * Read U16 value from the buffer and shift cursor by 2.\n   * @returns\n   */\n  read16() {\n    const value = this.dataView.getUint16(this.bytePosition, true);\n    this.shift(2);\n    return value;\n  }\n  /**\n   * Read U32 value from the buffer and shift cursor by 4.\n   * @returns\n   */\n  read32() {\n    const value = this.dataView.getUint32(this.bytePosition, true);\n    this.shift(4);\n    return value;\n  }\n  /**\n   * Read U64 value from the buffer and shift cursor by 8.\n   * @returns\n   */\n  read64() {\n    const value1 = this.read32();\n    const value2 = this.read32();\n    const result = value2.toString(16) + value1.toString(16).padStart(8, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 16.\n   */\n  read128() {\n    const value1 = BigInt(this.read64());\n    const value2 = BigInt(this.read64());\n    const result = value2.toString(16) + value1.toString(16).padStart(16, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 32.\n   * @returns\n   */\n  read256() {\n    const value1 = BigInt(this.read128());\n    const value2 = BigInt(this.read128());\n    const result = value2.toString(16) + value1.toString(16).padStart(32, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read `num` number of bytes from the buffer and shift cursor by `num`.\n   * @param num Number of bytes to read.\n   */\n  readBytes(num) {\n    const start = this.bytePosition + this.dataView.byteOffset;\n    const value = new Uint8Array(this.dataView.buffer, start, num);\n    this.shift(num);\n    return value;\n  }\n  /**\n   * Read ULEB value - an integer of varying size. Used for enum indexes and\n   * vector lengths.\n   * @returns {Number} The ULEB value.\n   */\n  readULEB() {\n    const start = this.bytePosition + this.dataView.byteOffset;\n    const buffer = new Uint8Array(this.dataView.buffer, start);\n    const { value, length } = (0,_uleb_js__WEBPACK_IMPORTED_MODULE_0__.ulebDecode)(buffer);\n    this.shift(length);\n    return value;\n  }\n  /**\n   * Read a BCS vector: read a length and then apply function `cb` X times\n   * where X is the length of the vector, defined as ULEB in BCS bytes.\n   * @param cb Callback to process elements of vector.\n   * @returns {Array<Any>} Array of the resulting values, returned by callback.\n   */\n  readVec(cb) {\n    const length = this.readULEB();\n    const result = [];\n    for (let i = 0; i < length; i++) {\n      result.push(cb(this, i, length));\n    }\n    return result;\n  }\n}\n\n//# sourceMappingURL=reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG15c3RlbitiY3NAMS44LjAvbm9kZV9tb2R1bGVzL0BteXN0ZW4vYmNzL2Rpc3QvZXNtL3JlYWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1QztBQUN2QztBQUNBO0FBQ0EsYUFBYSxZQUFZO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGdCQUFnQixFQUFFLG9EQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTWF0dGVvXFxEZXNrdG9wXFxWZWlsQWNjb3JkXFxic2Etc3VpLXRlbXBsYXRlLWZyb250ZW5kLTIwMjVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEBteXN0ZW4rYmNzQDEuOC4wXFxub2RlX21vZHVsZXNcXEBteXN0ZW5cXGJjc1xcZGlzdFxcZXNtXFxyZWFkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdWxlYkRlY29kZSB9IGZyb20gXCIuL3VsZWIuanNcIjtcbmNsYXNzIEJjc1JlYWRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGEgRGF0YSB0byB1c2UgYXMgYSBidWZmZXIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5ieXRlUG9zaXRpb24gPSAwO1xuICAgIHRoaXMuZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgfVxuICAvKipcbiAgICogU2hpZnQgY3VycmVudCBjdXJzb3IgcG9zaXRpb24gYnkgYGJ5dGVzYC5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJ5dGVzIE51bWJlciBvZiBieXRlcyB0b1xuICAgKiBAcmV0dXJucyB7dGhpc30gU2VsZiBmb3IgcG9zc2libGUgY2hhaW5pbmcuXG4gICAqL1xuICBzaGlmdChieXRlcykge1xuICAgIHRoaXMuYnl0ZVBvc2l0aW9uICs9IGJ5dGVzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZWFkIFU4IHZhbHVlIGZyb20gdGhlIGJ1ZmZlciBhbmQgc2hpZnQgY3Vyc29yIGJ5IDEuXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICByZWFkOCgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGF0YVZpZXcuZ2V0VWludDgodGhpcy5ieXRlUG9zaXRpb24pO1xuICAgIHRoaXMuc2hpZnQoMSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBSZWFkIFUxNiB2YWx1ZSBmcm9tIHRoZSBidWZmZXIgYW5kIHNoaWZ0IGN1cnNvciBieSAyLlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgcmVhZDE2KCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhVmlldy5nZXRVaW50MTYodGhpcy5ieXRlUG9zaXRpb24sIHRydWUpO1xuICAgIHRoaXMuc2hpZnQoMik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBSZWFkIFUzMiB2YWx1ZSBmcm9tIHRoZSBidWZmZXIgYW5kIHNoaWZ0IGN1cnNvciBieSA0LlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgcmVhZDMyKCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhVmlldy5nZXRVaW50MzIodGhpcy5ieXRlUG9zaXRpb24sIHRydWUpO1xuICAgIHRoaXMuc2hpZnQoNCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBSZWFkIFU2NCB2YWx1ZSBmcm9tIHRoZSBidWZmZXIgYW5kIHNoaWZ0IGN1cnNvciBieSA4LlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgcmVhZDY0KCkge1xuICAgIGNvbnN0IHZhbHVlMSA9IHRoaXMucmVhZDMyKCk7XG4gICAgY29uc3QgdmFsdWUyID0gdGhpcy5yZWFkMzIoKTtcbiAgICBjb25zdCByZXN1bHQgPSB2YWx1ZTIudG9TdHJpbmcoMTYpICsgdmFsdWUxLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg4LCBcIjBcIik7XG4gICAgcmV0dXJuIEJpZ0ludChcIjB4XCIgKyByZXN1bHQpLnRvU3RyaW5nKDEwKTtcbiAgfVxuICAvKipcbiAgICogUmVhZCBVMTI4IHZhbHVlIGZyb20gdGhlIGJ1ZmZlciBhbmQgc2hpZnQgY3Vyc29yIGJ5IDE2LlxuICAgKi9cbiAgcmVhZDEyOCgpIHtcbiAgICBjb25zdCB2YWx1ZTEgPSBCaWdJbnQodGhpcy5yZWFkNjQoKSk7XG4gICAgY29uc3QgdmFsdWUyID0gQmlnSW50KHRoaXMucmVhZDY0KCkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlMi50b1N0cmluZygxNikgKyB2YWx1ZTEudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDE2LCBcIjBcIik7XG4gICAgcmV0dXJuIEJpZ0ludChcIjB4XCIgKyByZXN1bHQpLnRvU3RyaW5nKDEwKTtcbiAgfVxuICAvKipcbiAgICogUmVhZCBVMTI4IHZhbHVlIGZyb20gdGhlIGJ1ZmZlciBhbmQgc2hpZnQgY3Vyc29yIGJ5IDMyLlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgcmVhZDI1NigpIHtcbiAgICBjb25zdCB2YWx1ZTEgPSBCaWdJbnQodGhpcy5yZWFkMTI4KCkpO1xuICAgIGNvbnN0IHZhbHVlMiA9IEJpZ0ludCh0aGlzLnJlYWQxMjgoKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gdmFsdWUyLnRvU3RyaW5nKDE2KSArIHZhbHVlMS50b1N0cmluZygxNikucGFkU3RhcnQoMzIsIFwiMFwiKTtcbiAgICByZXR1cm4gQmlnSW50KFwiMHhcIiArIHJlc3VsdCkudG9TdHJpbmcoMTApO1xuICB9XG4gIC8qKlxuICAgKiBSZWFkIGBudW1gIG51bWJlciBvZiBieXRlcyBmcm9tIHRoZSBidWZmZXIgYW5kIHNoaWZ0IGN1cnNvciBieSBgbnVtYC5cbiAgICogQHBhcmFtIG51bSBOdW1iZXIgb2YgYnl0ZXMgdG8gcmVhZC5cbiAgICovXG4gIHJlYWRCeXRlcyhudW0pIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuYnl0ZVBvc2l0aW9uICsgdGhpcy5kYXRhVmlldy5ieXRlT2Zmc2V0O1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhVmlldy5idWZmZXIsIHN0YXJ0LCBudW0pO1xuICAgIHRoaXMuc2hpZnQobnVtKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlYWQgVUxFQiB2YWx1ZSAtIGFuIGludGVnZXIgb2YgdmFyeWluZyBzaXplLiBVc2VkIGZvciBlbnVtIGluZGV4ZXMgYW5kXG4gICAqIHZlY3RvciBsZW5ndGhzLlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgVUxFQiB2YWx1ZS5cbiAgICovXG4gIHJlYWRVTEVCKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5ieXRlUG9zaXRpb24gKyB0aGlzLmRhdGFWaWV3LmJ5dGVPZmZzZXQ7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhVmlldy5idWZmZXIsIHN0YXJ0KTtcbiAgICBjb25zdCB7IHZhbHVlLCBsZW5ndGggfSA9IHVsZWJEZWNvZGUoYnVmZmVyKTtcbiAgICB0aGlzLnNoaWZ0KGxlbmd0aCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBSZWFkIGEgQkNTIHZlY3RvcjogcmVhZCBhIGxlbmd0aCBhbmQgdGhlbiBhcHBseSBmdW5jdGlvbiBgY2JgIFggdGltZXNcbiAgICogd2hlcmUgWCBpcyB0aGUgbGVuZ3RoIG9mIHRoZSB2ZWN0b3IsIGRlZmluZWQgYXMgVUxFQiBpbiBCQ1MgYnl0ZXMuXG4gICAqIEBwYXJhbSBjYiBDYWxsYmFjayB0byBwcm9jZXNzIGVsZW1lbnRzIG9mIHZlY3Rvci5cbiAgICogQHJldHVybnMge0FycmF5PEFueT59IEFycmF5IG9mIHRoZSByZXN1bHRpbmcgdmFsdWVzLCByZXR1cm5lZCBieSBjYWxsYmFjay5cbiAgICovXG4gIHJlYWRWZWMoY2IpIHtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLnJlYWRVTEVCKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0LnB1c2goY2IodGhpcywgaSwgbGVuZ3RoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEJjc1JlYWRlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWRlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/uleb.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/uleb.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ulebDecode: () => (/* binding */ ulebDecode),\n/* harmony export */   ulebEncode: () => (/* binding */ ulebEncode)\n/* harmony export */ });\nfunction ulebEncode(num) {\n  const arr = [];\n  let len = 0;\n  if (num === 0) {\n    return [0];\n  }\n  while (num > 0) {\n    arr[len] = num & 127;\n    if (num >>= 7) {\n      arr[len] |= 128;\n    }\n    len += 1;\n  }\n  return arr;\n}\nfunction ulebDecode(arr) {\n  let total = 0;\n  let shift = 0;\n  let len = 0;\n  while (true) {\n    const byte = arr[len];\n    len += 1;\n    total |= (byte & 127) << shift;\n    if ((byte & 128) === 0) {\n      break;\n    }\n    shift += 7;\n  }\n  return {\n    value: total,\n    length: len\n  };\n}\n\n//# sourceMappingURL=uleb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG15c3RlbitiY3NAMS44LjAvbm9kZV9tb2R1bGVzL0BteXN0ZW4vYmNzL2Rpc3QvZXNtL3VsZWIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXE1hdHRlb1xcRGVza3RvcFxcVmVpbEFjY29yZFxcYnNhLXN1aS10ZW1wbGF0ZS1mcm9udGVuZC0yMDI1XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAbXlzdGVuK2Jjc0AxLjguMFxcbm9kZV9tb2R1bGVzXFxAbXlzdGVuXFxiY3NcXGRpc3RcXGVzbVxcdWxlYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB1bGViRW5jb2RlKG51bSkge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgbGV0IGxlbiA9IDA7XG4gIGlmIChudW0gPT09IDApIHtcbiAgICByZXR1cm4gWzBdO1xuICB9XG4gIHdoaWxlIChudW0gPiAwKSB7XG4gICAgYXJyW2xlbl0gPSBudW0gJiAxMjc7XG4gICAgaWYgKG51bSA+Pj0gNykge1xuICAgICAgYXJyW2xlbl0gfD0gMTI4O1xuICAgIH1cbiAgICBsZW4gKz0gMTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuZnVuY3Rpb24gdWxlYkRlY29kZShhcnIpIHtcbiAgbGV0IHRvdGFsID0gMDtcbiAgbGV0IHNoaWZ0ID0gMDtcbiAgbGV0IGxlbiA9IDA7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgYnl0ZSA9IGFycltsZW5dO1xuICAgIGxlbiArPSAxO1xuICAgIHRvdGFsIHw9IChieXRlICYgMTI3KSA8PCBzaGlmdDtcbiAgICBpZiAoKGJ5dGUgJiAxMjgpID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2hpZnQgKz0gNztcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbHVlOiB0b3RhbCxcbiAgICBsZW5ndGg6IGxlblxuICB9O1xufVxuZXhwb3J0IHtcbiAgdWxlYkRlY29kZSxcbiAgdWxlYkVuY29kZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVsZWIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/uleb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/utils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/utils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeStr: () => (/* binding */ decodeStr),\n/* harmony export */   encodeStr: () => (/* binding */ encodeStr),\n/* harmony export */   splitGenericParameters: () => (/* binding */ splitGenericParameters)\n/* harmony export */ });\n/* harmony import */ var _mysten_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mysten/utils */ \"(ssr)/./node_modules/.pnpm/@mysten+utils@0.2.0/node_modules/@mysten/utils/dist/esm/b58.js\");\n/* harmony import */ var _mysten_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mysten/utils */ \"(ssr)/./node_modules/.pnpm/@mysten+utils@0.2.0/node_modules/@mysten/utils/dist/esm/b64.js\");\n/* harmony import */ var _mysten_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/utils */ \"(ssr)/./node_modules/.pnpm/@mysten+utils@0.2.0/node_modules/@mysten/utils/dist/esm/hex.js\");\n\nfunction encodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_0__.toBase58)(data);\n    case \"base64\":\n      return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_1__.toBase64)(data);\n    case \"hex\":\n      return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_2__.toHex)(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction decodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_0__.fromBase58)(data);\n    case \"base64\":\n      return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_1__.fromBase64)(data);\n    case \"hex\":\n      return (0,_mysten_utils__WEBPACK_IMPORTED_MODULE_2__.fromHex)(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction splitGenericParameters(str, genericSeparators = [\"<\", \">\"]) {\n  const [left, right] = genericSeparators;\n  const tok = [];\n  let word = \"\";\n  let nestedAngleBrackets = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === left) {\n      nestedAngleBrackets++;\n    }\n    if (char === right) {\n      nestedAngleBrackets--;\n    }\n    if (nestedAngleBrackets === 0 && char === \",\") {\n      tok.push(word.trim());\n      word = \"\";\n      continue;\n    }\n    word += char;\n  }\n  tok.push(word.trim());\n  return tok;\n}\n\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG15c3RlbitiY3NAMS44LjAvbm9kZV9tb2R1bGVzL0BteXN0ZW4vYmNzL2Rpc3QvZXNtL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEyRjtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVEQUFRO0FBQ3JCO0FBQ0EsYUFBYSx1REFBUTtBQUNyQjtBQUNBLGFBQWEsb0RBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlEQUFVO0FBQ3ZCO0FBQ0EsYUFBYSx5REFBVTtBQUN2QjtBQUNBLGFBQWEsc0RBQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxNYXR0ZW9cXERlc2t0b3BcXFZlaWxBY2NvcmRcXGJzYS1zdWktdGVtcGxhdGUtZnJvbnRlbmQtMjAyNVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG15c3RlbitiY3NAMS44LjBcXG5vZGVfbW9kdWxlc1xcQG15c3RlblxcYmNzXFxkaXN0XFxlc21cXHV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb21CYXNlNTgsIGZyb21CYXNlNjQsIGZyb21IZXgsIHRvQmFzZTU4LCB0b0Jhc2U2NCwgdG9IZXggfSBmcm9tIFwiQG15c3Rlbi91dGlsc1wiO1xuZnVuY3Rpb24gZW5jb2RlU3RyKGRhdGEsIGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlIFwiYmFzZTU4XCI6XG4gICAgICByZXR1cm4gdG9CYXNlNTgoZGF0YSk7XG4gICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgcmV0dXJuIHRvQmFzZTY0KGRhdGEpO1xuICAgIGNhc2UgXCJoZXhcIjpcbiAgICAgIHJldHVybiB0b0hleChkYXRhKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZW5jb2RpbmcsIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiBiYXNlNjQsIGhleFwiKTtcbiAgfVxufVxuZnVuY3Rpb24gZGVjb2RlU3RyKGRhdGEsIGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlIFwiYmFzZTU4XCI6XG4gICAgICByZXR1cm4gZnJvbUJhc2U1OChkYXRhKTtcbiAgICBjYXNlIFwiYmFzZTY0XCI6XG4gICAgICByZXR1cm4gZnJvbUJhc2U2NChkYXRhKTtcbiAgICBjYXNlIFwiaGV4XCI6XG4gICAgICByZXR1cm4gZnJvbUhleChkYXRhKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZW5jb2RpbmcsIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiBiYXNlNjQsIGhleFwiKTtcbiAgfVxufVxuZnVuY3Rpb24gc3BsaXRHZW5lcmljUGFyYW1ldGVycyhzdHIsIGdlbmVyaWNTZXBhcmF0b3JzID0gW1wiPFwiLCBcIj5cIl0pIHtcbiAgY29uc3QgW2xlZnQsIHJpZ2h0XSA9IGdlbmVyaWNTZXBhcmF0b3JzO1xuICBjb25zdCB0b2sgPSBbXTtcbiAgbGV0IHdvcmQgPSBcIlwiO1xuICBsZXQgbmVzdGVkQW5nbGVCcmFja2V0cyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hhciA9IHN0cltpXTtcbiAgICBpZiAoY2hhciA9PT0gbGVmdCkge1xuICAgICAgbmVzdGVkQW5nbGVCcmFja2V0cysrO1xuICAgIH1cbiAgICBpZiAoY2hhciA9PT0gcmlnaHQpIHtcbiAgICAgIG5lc3RlZEFuZ2xlQnJhY2tldHMtLTtcbiAgICB9XG4gICAgaWYgKG5lc3RlZEFuZ2xlQnJhY2tldHMgPT09IDAgJiYgY2hhciA9PT0gXCIsXCIpIHtcbiAgICAgIHRvay5wdXNoKHdvcmQudHJpbSgpKTtcbiAgICAgIHdvcmQgPSBcIlwiO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHdvcmQgKz0gY2hhcjtcbiAgfVxuICB0b2sucHVzaCh3b3JkLnRyaW0oKSk7XG4gIHJldHVybiB0b2s7XG59XG5leHBvcnQge1xuICBkZWNvZGVTdHIsXG4gIGVuY29kZVN0cixcbiAgc3BsaXRHZW5lcmljUGFyYW1ldGVyc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/writer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/writer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BcsWriter: () => (/* binding */ BcsWriter)\n/* harmony export */ });\n/* harmony import */ var _uleb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uleb.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/uleb.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/utils.js\");\n\n\nclass BcsWriter {\n  constructor({\n    initialSize = 1024,\n    maxSize = Infinity,\n    allocateSize = 1024\n  } = {}) {\n    this.bytePosition = 0;\n    this.size = initialSize;\n    this.maxSize = maxSize;\n    this.allocateSize = allocateSize;\n    this.dataView = new DataView(new ArrayBuffer(initialSize));\n  }\n  ensureSizeOrGrow(bytes) {\n    const requiredSize = this.bytePosition + bytes;\n    if (requiredSize > this.size) {\n      const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);\n      if (requiredSize > nextSize) {\n        throw new Error(\n          `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`\n        );\n      }\n      this.size = nextSize;\n      const nextBuffer = new ArrayBuffer(this.size);\n      new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));\n      this.dataView = new DataView(nextBuffer);\n    }\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Write a U8 value into a buffer and shift cursor position by 1.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write8(value) {\n    this.ensureSizeOrGrow(1);\n    this.dataView.setUint8(this.bytePosition, Number(value));\n    return this.shift(1);\n  }\n  /**\n   * Write a U16 value into a buffer and shift cursor position by 2.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write16(value) {\n    this.ensureSizeOrGrow(2);\n    this.dataView.setUint16(this.bytePosition, Number(value), true);\n    return this.shift(2);\n  }\n  /**\n   * Write a U32 value into a buffer and shift cursor position by 4.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write32(value) {\n    this.ensureSizeOrGrow(4);\n    this.dataView.setUint32(this.bytePosition, Number(value), true);\n    return this.shift(4);\n  }\n  /**\n   * Write a U64 value into a buffer and shift cursor position by 8.\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write64(value) {\n    toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U128 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write128(value) {\n    toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U256 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write256(value) {\n    toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a ULEB value into a buffer and shift cursor position by number of bytes\n   * written.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  writeULEB(value) {\n    (0,_uleb_js__WEBPACK_IMPORTED_MODULE_0__.ulebEncode)(value).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a vector into a buffer by first writing the vector length and then calling\n   * a callback on each passed value.\n   *\n   * @param {Array<Any>} vector Array of elements to write.\n   * @param {WriteVecCb} cb Callback to call on each element of the vector.\n   * @returns {this}\n   */\n  writeVec(vector, cb) {\n    this.writeULEB(vector.length);\n    Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));\n    return this;\n  }\n  /**\n   * Adds support for iterations over the object.\n   * @returns {Uint8Array}\n   */\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.bytePosition; i++) {\n      yield this.dataView.getUint8(i);\n    }\n    return this.toBytes();\n  }\n  /**\n   * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).\n   * @returns {Uint8Array} Resulting bcs.\n   */\n  toBytes() {\n    return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));\n  }\n  /**\n   * Represent data as 'hex' or 'base64'\n   * @param encoding Encoding to use: 'base64' or 'hex'\n   */\n  toString(encoding) {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.encodeStr)(this.toBytes(), encoding);\n  }\n}\nfunction toLittleEndian(bigint, size) {\n  const result = new Uint8Array(size);\n  let i = 0;\n  while (bigint > 0) {\n    result[i] = Number(bigint % BigInt(256));\n    bigint = bigint / BigInt(256);\n    i += 1;\n  }\n  return result;\n}\n\n//# sourceMappingURL=writer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG15c3RlbitiY3NAMS44LjAvbm9kZV9tb2R1bGVzL0BteXN0ZW4vYmNzL2Rpc3QvZXNtL3dyaXRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUM7QUFDQTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxJQUFJO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HLFVBQVUsY0FBYyxhQUFhLG1CQUFtQixhQUFhO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0EsSUFBSSxvREFBVTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QixhQUFhLFlBQVk7QUFDekIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0RBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxNYXR0ZW9cXERlc2t0b3BcXFZlaWxBY2NvcmRcXGJzYS1zdWktdGVtcGxhdGUtZnJvbnRlbmQtMjAyNVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG15c3RlbitiY3NAMS44LjBcXG5vZGVfbW9kdWxlc1xcQG15c3RlblxcYmNzXFxkaXN0XFxlc21cXHdyaXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bGViRW5jb2RlIH0gZnJvbSBcIi4vdWxlYi5qc1wiO1xuaW1wb3J0IHsgZW5jb2RlU3RyIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmNsYXNzIEJjc1dyaXRlciB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBpbml0aWFsU2l6ZSA9IDEwMjQsXG4gICAgbWF4U2l6ZSA9IEluZmluaXR5LFxuICAgIGFsbG9jYXRlU2l6ZSA9IDEwMjRcbiAgfSA9IHt9KSB7XG4gICAgdGhpcy5ieXRlUG9zaXRpb24gPSAwO1xuICAgIHRoaXMuc2l6ZSA9IGluaXRpYWxTaXplO1xuICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemU7XG4gICAgdGhpcy5hbGxvY2F0ZVNpemUgPSBhbGxvY2F0ZVNpemU7XG4gICAgdGhpcy5kYXRhVmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoaW5pdGlhbFNpemUpKTtcbiAgfVxuICBlbnN1cmVTaXplT3JHcm93KGJ5dGVzKSB7XG4gICAgY29uc3QgcmVxdWlyZWRTaXplID0gdGhpcy5ieXRlUG9zaXRpb24gKyBieXRlcztcbiAgICBpZiAocmVxdWlyZWRTaXplID4gdGhpcy5zaXplKSB7XG4gICAgICBjb25zdCBuZXh0U2l6ZSA9IE1hdGgubWluKHRoaXMubWF4U2l6ZSwgdGhpcy5zaXplICsgdGhpcy5hbGxvY2F0ZVNpemUpO1xuICAgICAgaWYgKHJlcXVpcmVkU2l6ZSA+IG5leHRTaXplKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQXR0ZW1wdGluZyB0byBzZXJpYWxpemUgdG8gQkNTLCBidXQgYnVmZmVyIGRvZXMgbm90IGhhdmUgZW5vdWdoIHNpemUuIEFsbG9jYXRlZCBzaXplOiAke3RoaXMuc2l6ZX0sIE1heCBzaXplOiAke3RoaXMubWF4U2l6ZX0sIFJlcXVpcmVkIHNpemU6ICR7cmVxdWlyZWRTaXplfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2l6ZSA9IG5leHRTaXplO1xuICAgICAgY29uc3QgbmV4dEJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLnNpemUpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkobmV4dEJ1ZmZlcikuc2V0KG5ldyBVaW50OEFycmF5KHRoaXMuZGF0YVZpZXcuYnVmZmVyKSk7XG4gICAgICB0aGlzLmRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KG5leHRCdWZmZXIpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2hpZnQgY3VycmVudCBjdXJzb3IgcG9zaXRpb24gYnkgYGJ5dGVzYC5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJ5dGVzIE51bWJlciBvZiBieXRlcyB0b1xuICAgKiBAcmV0dXJucyB7dGhpc30gU2VsZiBmb3IgcG9zc2libGUgY2hhaW5pbmcuXG4gICAqL1xuICBzaGlmdChieXRlcykge1xuICAgIHRoaXMuYnl0ZVBvc2l0aW9uICs9IGJ5dGVzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBXcml0ZSBhIFU4IHZhbHVlIGludG8gYSBidWZmZXIgYW5kIHNoaWZ0IGN1cnNvciBwb3NpdGlvbiBieSAxLlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGUuXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgd3JpdGU4KHZhbHVlKSB7XG4gICAgdGhpcy5lbnN1cmVTaXplT3JHcm93KDEpO1xuICAgIHRoaXMuZGF0YVZpZXcuc2V0VWludDgodGhpcy5ieXRlUG9zaXRpb24sIE51bWJlcih2YWx1ZSkpO1xuICAgIHJldHVybiB0aGlzLnNoaWZ0KDEpO1xuICB9XG4gIC8qKlxuICAgKiBXcml0ZSBhIFUxNiB2YWx1ZSBpbnRvIGEgYnVmZmVyIGFuZCBzaGlmdCBjdXJzb3IgcG9zaXRpb24gYnkgMi5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlLlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHdyaXRlMTYodmFsdWUpIHtcbiAgICB0aGlzLmVuc3VyZVNpemVPckdyb3coMik7XG4gICAgdGhpcy5kYXRhVmlldy5zZXRVaW50MTYodGhpcy5ieXRlUG9zaXRpb24sIE51bWJlcih2YWx1ZSksIHRydWUpO1xuICAgIHJldHVybiB0aGlzLnNoaWZ0KDIpO1xuICB9XG4gIC8qKlxuICAgKiBXcml0ZSBhIFUzMiB2YWx1ZSBpbnRvIGEgYnVmZmVyIGFuZCBzaGlmdCBjdXJzb3IgcG9zaXRpb24gYnkgNC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlLlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHdyaXRlMzIodmFsdWUpIHtcbiAgICB0aGlzLmVuc3VyZVNpemVPckdyb3coNCk7XG4gICAgdGhpcy5kYXRhVmlldy5zZXRVaW50MzIodGhpcy5ieXRlUG9zaXRpb24sIE51bWJlcih2YWx1ZSksIHRydWUpO1xuICAgIHJldHVybiB0aGlzLnNoaWZ0KDQpO1xuICB9XG4gIC8qKlxuICAgKiBXcml0ZSBhIFU2NCB2YWx1ZSBpbnRvIGEgYnVmZmVyIGFuZCBzaGlmdCBjdXJzb3IgcG9zaXRpb24gYnkgOC5cbiAgICogQHBhcmFtIHtiaWdpbnR9IHZhbHVlIFZhbHVlIHRvIHdyaXRlLlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHdyaXRlNjQodmFsdWUpIHtcbiAgICB0b0xpdHRsZUVuZGlhbihCaWdJbnQodmFsdWUpLCA4KS5mb3JFYWNoKChlbCkgPT4gdGhpcy53cml0ZTgoZWwpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogV3JpdGUgYSBVMTI4IHZhbHVlIGludG8gYSBidWZmZXIgYW5kIHNoaWZ0IGN1cnNvciBwb3NpdGlvbiBieSAxNi5cbiAgICpcbiAgICogQHBhcmFtIHtiaWdpbnR9IHZhbHVlIFZhbHVlIHRvIHdyaXRlLlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHdyaXRlMTI4KHZhbHVlKSB7XG4gICAgdG9MaXR0bGVFbmRpYW4oQmlnSW50KHZhbHVlKSwgMTYpLmZvckVhY2goKGVsKSA9PiB0aGlzLndyaXRlOChlbCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBXcml0ZSBhIFUyNTYgdmFsdWUgaW50byBhIGJ1ZmZlciBhbmQgc2hpZnQgY3Vyc29yIHBvc2l0aW9uIGJ5IDE2LlxuICAgKlxuICAgKiBAcGFyYW0ge2JpZ2ludH0gdmFsdWUgVmFsdWUgdG8gd3JpdGUuXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgd3JpdGUyNTYodmFsdWUpIHtcbiAgICB0b0xpdHRsZUVuZGlhbihCaWdJbnQodmFsdWUpLCAzMikuZm9yRWFjaCgoZWwpID0+IHRoaXMud3JpdGU4KGVsKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFdyaXRlIGEgVUxFQiB2YWx1ZSBpbnRvIGEgYnVmZmVyIGFuZCBzaGlmdCBjdXJzb3IgcG9zaXRpb24gYnkgbnVtYmVyIG9mIGJ5dGVzXG4gICAqIHdyaXR0ZW4uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZS5cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICB3cml0ZVVMRUIodmFsdWUpIHtcbiAgICB1bGViRW5jb2RlKHZhbHVlKS5mb3JFYWNoKChlbCkgPT4gdGhpcy53cml0ZTgoZWwpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogV3JpdGUgYSB2ZWN0b3IgaW50byBhIGJ1ZmZlciBieSBmaXJzdCB3cml0aW5nIHRoZSB2ZWN0b3IgbGVuZ3RoIGFuZCB0aGVuIGNhbGxpbmdcbiAgICogYSBjYWxsYmFjayBvbiBlYWNoIHBhc3NlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxBbnk+fSB2ZWN0b3IgQXJyYXkgb2YgZWxlbWVudHMgdG8gd3JpdGUuXG4gICAqIEBwYXJhbSB7V3JpdGVWZWNDYn0gY2IgQ2FsbGJhY2sgdG8gY2FsbCBvbiBlYWNoIGVsZW1lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICB3cml0ZVZlYyh2ZWN0b3IsIGNiKSB7XG4gICAgdGhpcy53cml0ZVVMRUIodmVjdG9yLmxlbmd0aCk7XG4gICAgQXJyYXkuZnJvbSh2ZWN0b3IpLmZvckVhY2goKGVsLCBpKSA9PiBjYih0aGlzLCBlbCwgaSwgdmVjdG9yLmxlbmd0aCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIHN1cHBvcnQgZm9yIGl0ZXJhdGlvbnMgb3ZlciB0aGUgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7VWludDhBcnJheX1cbiAgICovXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnl0ZVBvc2l0aW9uOyBpKyspIHtcbiAgICAgIHlpZWxkIHRoaXMuZGF0YVZpZXcuZ2V0VWludDgoaSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvQnl0ZXMoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHVuZGVybHlpbmcgYnVmZmVyIHRha2luZyBvbmx5IHZhbHVlIGJ5dGVzIChpbiBjYXNlIGluaXRpYWwgYnVmZmVyIHNpemUgd2FzIGJpZ2dlcikuXG4gICAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBSZXN1bHRpbmcgYmNzLlxuICAgKi9cbiAgdG9CeXRlcygpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhVmlldy5idWZmZXIuc2xpY2UoMCwgdGhpcy5ieXRlUG9zaXRpb24pKTtcbiAgfVxuICAvKipcbiAgICogUmVwcmVzZW50IGRhdGEgYXMgJ2hleCcgb3IgJ2Jhc2U2NCdcbiAgICogQHBhcmFtIGVuY29kaW5nIEVuY29kaW5nIHRvIHVzZTogJ2Jhc2U2NCcgb3IgJ2hleCdcbiAgICovXG4gIHRvU3RyaW5nKGVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGVuY29kZVN0cih0aGlzLnRvQnl0ZXMoKSwgZW5jb2RpbmcpO1xuICB9XG59XG5mdW5jdGlvbiB0b0xpdHRsZUVuZGlhbihiaWdpbnQsIHNpemUpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGJpZ2ludCA+IDApIHtcbiAgICByZXN1bHRbaV0gPSBOdW1iZXIoYmlnaW50ICUgQmlnSW50KDI1NikpO1xuICAgIGJpZ2ludCA9IGJpZ2ludCAvIEJpZ0ludCgyNTYpO1xuICAgIGkgKz0gMTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IHtcbiAgQmNzV3JpdGVyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JpdGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mysten+bcs@1.8.0/node_modules/@mysten/bcs/dist/esm/writer.js\n");

/***/ })

};
;